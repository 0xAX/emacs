@c This is part of the Emacs manual.
@c Copyright (C) 2023 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Other Input Devices
@appendix Emacs and Unconventional Input Devices
@cindex other input devices

  Emacs was originally developed with the assumption that its users
have access to a desktop computer or computer terminal, with a
keyboard and perhaps a suitable pointing device such as a mouse.

  However, recent developments in the X Window System and operating
systems such as Android mean that this assumption no longer holds
true.  Emacs supports input from various other kinds of input devices,
which is detailed here.

@menu
* Touchscreens::                Using Emacs on touchscreens.
* On-Screen Keyboards::         Using Emacs with virtual keyboards.
@end menu

@node Touchscreens
@section Using Emacs on Touchscreens
@cindex touchscreen input

  Touchscreen input is the manipulation of a frame's contents by the
placement and motion of tools (instanced by fingers and such pointing
devices as styluses) on a monitor or computer terminal where it is
displayed.

  Under the X Window System or Android, Emacs detects and translates
the following sequences of movements (@dfn{gestures}) to common
actions:

@itemize @bullet
@item
@cindex tapping, touchscreens
  @dfn{Tapping}, briefly placing and lifting a tool from the display,
will select the window that was tapped, and execute any command bound
to @code{mouse-1} at that location in the window.  If a link
(@pxref{Mouse References}) exists there, then Emacs will follow that
link instead (insofar as such action differs from that taken upon the
simulation of a @code{mouse-1} event).

@item
@cindex scrolling, touchscreens
@vindex touch-screen-enable-hscroll
  @dfn{Scrolling}, which is continuous vertical or horizontal motion
on the screen, will scroll the contents of the window beneath the
tool's initial location in the direction of movement.  The user option
@code{touch-screen-enable-hscroll} governs whether horizontal
scrolling (@pxref{Horizontal Scrolling}) is performed in reaction to
this gesture.

@item
@cindex dragging, touchscreens
@cindex long-press, touchscreens
  @dfn{Dragging}, which is performing a @dfn{long-press} by placing a
tool on the display and leaving it there awhile before moving it to
another position, will move point to the tool's initial position, and
commence selecting text under the tool as it continues its motion, as
if @code{mouse-1} were to be held down and a mouse moved analogously.
@xref{Mouse Commands}.

@vindex touch-screen-word-select
@cindex word selection mode, touchscreens
  To the detriment of text selection, it can prove challenging to
position a tool accurately on a touch screen display.  The user option
@code{touch-screen-word-select}, which when enabled, prompts dragging
to select the complete word under the tool.  (Normally, the selection
is only extended to encompass the character beneath the tool.)

@vindex touch-screen-extend-selection
@cindex extending the selection, touchscreens
  In the same vein, it may be difficult to select all of the text
intended within a single gesture.  If the user option
@code{touch-screen-extend-selection} is enabled, taps on the locations
of the point or the mark within a window will begin a new ``drag''
gesture, where the region will be extended in the direction of any
subsequent movement.

@vindex touch-screen-preview-select
@cindex previewing the region during selection, touchscreens
  Difficulties in making accurate adjustments to the region from the
cursor being physically obscured by the tool can be mitigated by
indicating the position of the point within the echo area.  If
@code{touch-screen-preview-select} is non-@code{nil}, the line
surrounding point is displayed in the echo area (@pxref{Echo Area})
during the motion of the tool, below which is another line indicating
the position of point relative to the first.
@end itemize

@vindex touch-screen-delay
  Emacs registers a long-press after the time a tool has been placed
upon the screen exceeds 0.7 seconds.  This delay can be adjusted
through customizing the variable @code{touch-screen-delay}.

@node On-Screen Keyboards
@section Using Emacs with Virtual Keyboards
@cindex virtual keyboards
@cindex on-screen keyboards

  When there is no physical keyboard attached to a system, the
windowing system typically provides an on-screen keyboard, more often
known as a ``virtual keyboard'', containing rows of clickable buttons
that send keyboard input to the application, much like a real keyboard
would.  This virtual keyboard is hidden by default, as it uses up
valuable on-screen real estate, and must be opened once the program
being used is ready to accept keyboard input.

  Under the X Window System, the client that provides the on-screen
keyboard typically detects when the application is ready to accept
keyboard input through a set of complex heuristics, and automatically
displays the keyboard when necessary.

  On other systems such as Android, Emacs must tell the system when it
is ready to accept keyboard input.  Typically, this is done in
response to a touchscreen ``tap'' gesture (@pxref{Touchscreens}), or
once to the minibuffer becomes in use (@pxref{Minibuffer}.)

@vindex touch-screen-set-point-commands
  When a ``tap'' gesture results in a command being executed, Emacs
checks to see whether or not the command is supposed to set the point
by looking for it in the list @code{touch-screen-set-point-commands}.
If it is, then Emacs looks up whether or not the text under the point
is read-only; if not, it activates the on-screen keyboard, assuming
that the user is about to enter text in to the current buffer.

@vindex touch-screen-display-keyboard
  The user option @code{touch-screen-display-keyboard} forces Emacs to
always display the on screen keyboard; it may also be set buffer
locally, which means that Emacs should always display the keyboard
when the buffer is selected.

  Emacs also provides a set of functions to show or hide the on-screen
keyboard.  For more details, @pxref{On-Screen Keyboards,,, elisp, The
Emacs Lisp Reference Manual}.

@cindex quitting, without a keyboard
  Since it may not be possible for Emacs to display the on screen
keyboard while it is executing a command, Emacs implements a feature
on devices with only an on-screen keyboard, by which two rapid clicks
of a hardware button that is always present on the device results in
Emacs quitting.  @xref{Quitting}.

@vindex x-quit-keysym
  The button afforded such special treatment varies; under X, no such
button exists by default, but one can be configured through the
variable @code{x-quit-keysym}, whereas under Android it is always the
volume down buttons.

@cindex text conversion, keyboards
  Most input methods designed to work with on-screen keyboards perform
buffer edits differently from desktop input methods.

  On a conventional desktop windowing system, an input method will
simply display the contents of any on going character compositions on
screen, and send the appropriate key events to Emacs after completion.

  However, on screen keyboard input methods directly perform edits to
the selected window of each frame; this is known as ``text
conversion'', or ``string conversion'' under the X Window System.
Emacs enables these input methods whenever the buffer local value of
@code{text-conversion-style} is non-@code{nil}, normally inside
derivatives of @code{text-mode} and @code{prog-mode}.

  Text conversion is performed asynchronously whenever Emacs receives
a request to perform the conversion from the input method, and Emacs
is not currently reading a key sequence for which one prefix key has
already been read (@pxref{Keys}.)  After the conversion completes, a
@code{text-conversion} event is sent.  @xref{Misc Events,,, elisp, the
Emacs Reference Manual}.

@vindex text-conversion-face
  If the input method needs to work on a region of the buffer, then
the region becomes known as the ``composing region'' (or
``preconversion region''.)  The variable @code{text-conversion-face}
describes whether or not to display the composing region in a specific
face.
